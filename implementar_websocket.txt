requirements.txt

channels==4.0.0
channels-redis==4.1.0
daphne==4.0.0
redis==4.5.0

------
tabla clientes/models.py

from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json

class Cliente(models.Model):
    nombre = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    telefono = models.CharField(max_length=20)
    empresa = models.CharField(max_length=100, blank=True, null=True)
    direccion = models.TextField(blank=True, null=True)
    fecha_registro = models.DateTimeField(auto_now_add=True)
    activo = models.BooleanField(default=True)
    
    def __str__(self):
        return f"{self.nombre} - {self.email}"
    
    class Meta:
        ordering = ['-fecha_registro']
        verbose_name = "Cliente"
        verbose_name_plural = "Clientes"

# Señal para notificar via WebSocket cuando se crea un nuevo cliente
@receiver(post_save, sender=Cliente)
def notificar_nuevo_cliente(sender, instance, created, **kwargs):
    if created:
        channel_layer = get_channel_layer()
        
        # Preparar datos del cliente para enviar
        cliente_data = {
            'id': instance.id,
            'nombre': instance.nombre,
            'email': instance.email,
            'telefono': instance.telefono,
            'empresa': instance.empresa or '',
            'direccion': instance.direccion or '',
            'fecha_registro': instance.fecha_registro.strftime("%Y-%m-%d %H:%M:%S"),
            'activo': instance.activo
        }
        
        # Enviar notificación al grupo de WebSocket
        async_to_sync(channel_layer.group_send)(
            'clientes_updates',
            {
                'type': 'cliente_creado',
                'cliente': cliente_data
            }
        )

-----------
clientes/serializers.py
from rest_framework import serializers
from .models import Cliente

class ClienteSerializer(serializers.ModelSerializer):
    class Meta:
        model = Cliente
        fields = [
            'id', 'nombre', 'email', 'telefono', 
            'empresa', 'direccion', 'fecha_registro', 'activo'
        ]
        read_only_fields = ['id', 'fecha_registro']
    
    def validate_email(self, value):
        """Validación personalizada para el email"""
        if Cliente.objects.filter(email=value).exists():
            raise serializers.ValidationError("Ya existe un cliente con este email.")
        return value


class ClienteCreateSerializer(serializers.ModelSerializer):
    """Serializer específico para crear clientes"""
    class Meta:
        model = Cliente
        fields = ['nombre', 'email', 'telefono', 'empresa', 'direccion']
    
    def validate_email(self, value):
        if Cliente.objects.filter(email=value).exists():
            raise serializers.ValidationError("Ya existe un cliente con este email.")
        return value

----------
clientes/views.py

from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from django.shortcuts import render
from .models import Cliente
from .serializers import ClienteSerializer, ClienteCreateSerializer

class ClienteViewSet(viewsets.ModelViewSet):
    queryset = Cliente.objects.all()
    serializer_class = ClienteSerializer
    
    def get_serializer_class(self):
        if self.action == 'create':
            return ClienteCreateSerializer
        return ClienteSerializer
    
    def create(self, request, *args, **kwargs):
        """Crear un nuevo cliente"""
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            cliente = serializer.save()
            # Retornar el cliente creado con todos los campos
            response_serializer = ClienteSerializer(cliente)
            return Response(
                {
                    'success': True,
                    'message': 'Cliente creado exitosamente',
                    'cliente': response_serializer.data
                },
                status=status.HTTP_201_CREATED
            )
        return Response(
            {
                'success': False,
                'errors': serializer.errors
            },
            status=status.HTTP_400_BAD_REQUEST
        )
    
    @action(detail=False, methods=['get'])
    def activos(self, request):
        """Obtener solo clientes activos"""
        clientes_activos = self.queryset.filter(activo=True)
        serializer = self.get_serializer(clientes_activos, many=True)
        return Response(serializer.data)

def lista_clientes_view(request):
    """Vista para renderizar la página principal"""
    return render(request, 'clientes/lista_clientes.html')

---------------------
clientes/consumers.py

import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from .models import Cliente

class ClientesConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        # Unirse al grupo de actualizaciones de clientes
        self.group_name = 'clientes_updates'
        
        await self.channel_layer.group_add(
            self.group_name,
            self.channel_name
        )
        
        await self.accept()
        
        # Enviar mensaje de conexión exitosa
        await self.send(text_data=json.dumps({
            'type': 'connection_established',
            'message': 'Conectado al sistema de actualizaciones de clientes'
        }))

    async def disconnect(self, close_code):
        # Abandonar el grupo
        await self.channel_layer.group_discard(
            self.group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        """Manejar mensajes recibidos del cliente"""
        try:
            text_data_json = json.loads(text_data)
            message_type = text_data_json.get('type')
            
            if message_type == 'ping':
                await self.send(text_data=json.dumps({
                    'type': 'pong',
                    'message': 'Conexión activa'
                }))
        except json.JSONDecodeError:
            await self.send(text_data=json.dumps({
                'type': 'error',
                'message': 'Formato de mensaje inválido'
            }))

    # Manejar evento de cliente creado
    async def cliente_creado(self, event):
        cliente = event['cliente']
        
        # Enviar datos del nuevo cliente a todos los conectados
        await self.send(text_data=json.dumps({
            'type': 'nuevo_cliente',
            'cliente': cliente,
            'message': f'Nuevo cliente registrado: {cliente["nombre"]}'
        }))

----------
clientes/routing.py

from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/clientes/$', consumers.ClientesConsumer.as_asgi()),
]

-----------
clientes/urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import ClienteViewSet, lista_clientes_view

router = DefaultRouter()
router.register(r'clientes', ClienteViewSet)

urlpatterns = [
    path('', lista_clientes_view, name='lista_clientes'),
    path('api/', include(router.urls)),
]


-------------
myproject/settings.py

import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition
INSTALLED_APPS = [
    'daphne',  # Debe estar antes de django.contrib.staticfiles
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'channels',
    
    # Local apps
    'clientes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ASGI configuration
ASGI_APPLICATION = 'myproject.asgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# Channels configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Internationalization
LANGUAGE_CODE = 'es-es'
TIME_ZONE = 'America/Mexico_City'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


---------------
myproject.asgi.py

import os
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
import clientes.routing

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(
            clientes.routing.websocket_urlpatterns
        )
    ),
})

---------
Rutas principales
myproject/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('clientes.urls')),
]

----------
clientes/templates/clientes/Lista_clientes.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Clientes - Tiempo Real</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .status-connected { background-color: #28a745; }
        .status-disconnected { background-color: #dc3545; }
        .status-connecting { background-color: #ffc107; }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
            min-width: 300px;
        }
        
        .form-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
        }
        
        .table-section {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            padding: 30px;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container-fluid py-4">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h2 mb-0">
                        <i class="fas fa-users me-2"></i>
                        Sistema de Clientes
                    </h1>
                    <div class="d-flex align-items-center">
                        <span class="status-indicator" id="connectionStatus"></span>
                        <span id="connectionText">Conectando...</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Formulario de registro -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="form-section">
                    <h3 class="mb-4">
                        <i class="fas fa-user-plus me-2"></i>
                        Registrar Nuevo Cliente
                    </h3>
                    <form id="clienteForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="nombre" class="form-label">Nombre Completo *</label>
                                <input type="text" class="form-control" id="nombre" name="nombre" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email *</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="telefono" class="form-label">Teléfono *</label>
                                <input type="tel" class="form-control" id="telefono" name="telefono" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="empresa" class="form-label">Empresa</label>
                                <input type="text" class="form-control" id="empresa" name="empresa">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="direccion" class="form-label">Dirección</label>
                                <textarea class="form-control" id="direccion" name="direccion" rows="2"></textarea>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-light btn-lg">
                                <i class="fas fa-save me-2"></i>
                                Guardar Cliente
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Tabla de clientes -->
        <div class="row">
            <div class="col-12">
                <div class="table-section">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3 class="mb-0">
                            <i class="fas fa-table me-2"></i>
                            Lista de Clientes
                        </h3>
                        <span class="badge bg-primary fs-6" id="totalClientes">0 clientes</span>
                    </div>
                    
                    <div class="table-responsive">
                        <table id="clientesTable" class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre</th>
                                    <th>Email</th>
                                    <th>Teléfono</th>
                                    <th>Empresa</th>
                                    <th>Fecha Registro</th>
                                    <th>Estado</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Los datos se cargarán dinámicamente -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Contenedor para notificaciones -->
    <div id="notificationContainer"></div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>

    <script>
        $(document).ready(function() {
            let table;
            let clientesSocket;
            
            // Inicializar DataTables
            function initDataTable() {
                table = $('#clientesTable').DataTable({
                    ajax: {
                        url: '/api/clientes/',
                        dataSrc: ''
                    },
                    columns: [
                        { data: 'id' },
                        { data: 'nombre' },
                        { data: 'email' },
                        { data: 'telefono' },
                        { 
                            data: 'empresa',
                            render: function(data) {
                                return data || '<span class="text-muted">No especificada</span>';
                            }
                        },
                        { 
                            data: 'fecha_registro',
                            render: function(data) {
                                return new Date(data).toLocaleString('es-ES');
                            }
                        },
                        { 
                            data: 'activo',
                            render: function(data) {
                                return data ? 
                                    '<span class="badge bg-success">Activo</span>' : 
                                    '<span class="badge bg-secondary">Inactivo</span>';
                            }
                        }
                    ],
                    order: [[0, 'desc']],
                    language: {
                        url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json'
                    },
                    responsive: true,
                    pageLength: 10,
                    drawCallback: function() {
                        updateClientesCount();
                    }
                });
            }
            
            // Actualizar contador de clientes
            function updateClientesCount() {
                const count = table.data().count();
                $('#totalClientes').text(`${count} cliente${count !== 1 ? 's' : ''}`);
            }
            
            // Configurar WebSocket
            function initWebSocket() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${window.location.host}/ws/clientes/`;
                
                clientesSocket = new WebSocket(wsUrl);
                
                clientesSocket.onopen = function(e) {
                    updateConnectionStatus('connected');
                    showNotification('Conectado al sistema en tiempo real', 'success');
                };
                
                clientesSocket.onmessage = function(e) {
                    const data = JSON.parse(e.data);
                    
                    switch(data.type) {
                        case 'connection_established':
                            console.log('Conexión WebSocket establecida');
                            break;
                            
                        case 'nuevo_cliente':
                            // Añadir nuevo cliente a la tabla
                            table.row.add(data.cliente).draw(false);
                            showNotification(
                                `Nuevo cliente registrado: ${data.cliente.nombre}`, 
                                'info'
                            );
                            break;
                            
                        case 'pong':
                            console.log('Conexión activa');
                            break;
                    }
                };
                
                clientesSocket.onclose = function(e) {
                    updateConnectionStatus('disconnected');
                    showNotification('Conexión perdida. Intentando reconectar...', 'warning');
                    
                    // Intentar reconectar después de 3 segundos
                    setTimeout(initWebSocket, 3000);
                };
                
                clientesSocket.onerror = function(e) {
                    updateConnectionStatus('disconnected');
                    showNotification('Error de conexión WebSocket', 'danger');
                };
            }
            
            // Actualizar estado de conexión
            function updateConnectionStatus(status) {
                const statusElement = $('#connectionStatus');
                const textElement = $('#connectionText');
                
                statusElement.removeClass('status-connected status-disconnected status-connecting');
                
                switch(status) {
                    case 'connected':
                        statusElement.addClass('status-connected');
                        textElement.text('Conectado');
                        break;
                    case 'disconnected':
                        statusElement.addClass('status-disconnected');
                        textElement.text('Desconectado');
                        break;
                    case 'connecting':
                        statusElement.addClass('status-connecting');
                        textElement.text('Conectando...');
                        break;
                }
            }
            
            // Mostrar notificaciones
            function showNotification(message, type = 'info') {
                const notification = $(`
                    <div class="alert alert-${type} alert-dismissible fade show notification" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);
                
                $('#notificationContainer').append(notification);
                
                // Auto-remover después de 5 segundos
                setTimeout(() => {
                    notification.alert('close');
                }, 5000);
            }
            
            // Manejar envío del formulario
            $('#clienteForm').on('submit', function(e) {
                e.preventDefault();
                
                const formData = {
                    nombre: $('#nombre').val().trim(),
                    email: $('#email').val().trim(),
                    telefono: $('#telefono').val().trim(),
                    empresa: $('#empresa').val().trim(),
                    direccion: $('#direccion').val().trim()
                };
                
                // Validaciones básicas
                if (!formData.nombre || !formData.email || !formData.telefono) {
                    showNotification('Por favor, complete todos los campos obligatorios', 'warning');
                    return;
                }
                
                const submitBtn = $(this).find('button[type="submit"]');
                const originalText = submitBtn.html();
                
                // Deshabilitar botón y mostrar loading
                submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Guardando...');
                
                $.ajax({
                    url: '/api/clientes/',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(response) {
                        if (response.success) {
                            // Limpiar formulario
                            $('#clienteForm')[0].reset();
                            showNotification('Cliente guardado exitosamente', 'success');
                        } else {
                            showNotification('Error al guardar el cliente', 'danger');
                        }
                    },
                    error: function(xhr) {
                        let errorMessage = 'Error al guardar el cliente';
                        
                        if (xhr.responseJSON && xhr.responseJSON.errors) {
                            const errors = xhr.responseJSON.errors;
                            errorMessage = Object.values(errors).flat().join(', ');
                        }
                        
                        showNotification(errorMessage, 'danger');
                    },
                    complete: function() {
                        // Restaurar botón
                        submitBtn.prop('disabled', false).html(originalText);
                    }
                });
            });
            
            // Ping periódico para mantener conexión
            setInterval(function() {
                if (clientesSocket && clientesSocket.readyState === WebSocket.OPEN) {
                    clientesSocket.send(JSON.stringify({type: 'ping'}));
                }
            }, 30000); // Cada 30 segundos
            
            // Inicializar componentes
            updateConnectionStatus('connecting');
            initDataTable();
            initWebSocket();
        });
    </script>
</body>
</html>


-------
clientes/admin.py

from django.contrib import admin
from .models import Cliente

@admin.register(Cliente)
class ClienteAdmin(admin.ModelAdmin):
    list_display = ['id', 'nombre', 'email', 'telefono', 'empresa', 'fecha_registro', 'activo']
    list_filter = ['activo', 'fecha_registro']
    search_fields = ['nombre', 'email', 'telefono', 'empresa']
    list_editable = ['activo']
    ordering = ['-fecha_registro']
    readonly_fields = ['fecha_registro']
    
    fieldsets = (
        ('Información Personal', {
            'fields': ('nombre', 'email', 'telefono')
        }),
        ('Información Empresarial', {
            'fields': ('empresa', 'direccion')
        }),
        ('Estado', {
            'fields': ('activo', 'fecha_registro')
        }),
    )



-----------
setup_instructions.md

# Instrucciones de Configuración

## 1. Instalar Redis
```bash
# Ubuntu/Debian
sudo apt-get install redis-server

# macOS
brew install redis

# Windows (usando WSL o Docker)
docker run -d -p 6379:6379 redis:alpine

## 2. Instalar dependencias

```shellscript
pip install -r requirements.txt
```

## 3. Configurar base de datos

```shellscript
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
```

## 4. Ejecutar el servidor

```shellscript
# Iniciar Redis (si no está corriendo)
redis-server

# Iniciar Django
python manage.py runserver
```

## 5. Acceder a la aplicación

- Aplicación principal: [http://localhost:8000/](http://localhost:8000/)
- Admin: [http://localhost:8000/admin/](http://localhost:8000/admin/)
- API: [http://localhost:8000/api/clientes/](http://localhost:8000/api/clientes/)


## Funcionalidades implementadas:

✅ API REST con Django Rest Framework
✅ WebSockets con Django Channels
✅ Señales de Django para notificaciones automáticas
✅ DataTables con actualización en tiempo real
✅ Interfaz responsive con Bootstrap
✅ Validaciones de formulario
✅ Notificaciones en tiempo real
✅ Indicador de estado de conexión
✅ Reconexión automática de WebSocket

```plaintext

Este sistema completo te permite:

1. **Recibir datos del formulario** a través de la API REST
2. **Insertar en la tabla Clientes** usando Django ORM
3. **Enviar señales automáticas** cuando se crea un nuevo cliente
4. **Actualizar DataTables en tiempo real** sin recargar la página
5. **Mantener conexión WebSocket estable** con reconexión automática

La tabla se actualiza instantáneamente en todos los navegadores conectados cuando se registra un nuevo cliente.

<Actions>
  <Action name="Añadir autenticación JWT" description="Implementar autenticación JWT para proteger las APIs" />
  <Action name="Agregar funcionalidad de edición" description="Permitir editar clientes existentes en tiempo real" />
  <Action name="Implementar filtros avanzados" description="Añadir filtros por fecha, empresa y estado" />
  <Action name="Configurar Docker" description="Crear configuración Docker para desarrollo y producción" />
  <Action name="Añadir exportación de datos" description="Implementar exportación a Excel/PDF de la tabla" />
</Actions>
```
